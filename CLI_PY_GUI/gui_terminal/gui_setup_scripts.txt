# Setup-GUI-Interface.ps1
# Complete setup script for Python GUI terminal interface

param(
    [switch]$Force,
    [switch]$KeepVSCode
)

$ErrorActionPreference = 'Stop'

Write-Host "=" * 60 -ForegroundColor Green
Write-Host "  CLI Multi-Rapid GUI Interface Setup" -ForegroundColor Green
Write-Host "  Migrating from VS Code to Python GUI Terminal" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green
Write-Host

# Change to project directory
$ProjectRoot = "C:\Users\Richard Wilks\cli_multi_rapid_DEV"
Set-Location $ProjectRoot

# Step 1: Check prerequisites
Write-Host "üîç Checking prerequisites..." -ForegroundColor Yellow

# Check Python
try {
    $pythonVersion = python --version 2>$null
    Write-Host "‚úÖ Python found: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python not found. Please install Python 3.8+." -ForegroundColor Red
    exit 1
}

# Check pip
try {
    pip --version | Out-Null
    Write-Host "‚úÖ pip found" -ForegroundColor Green
} catch {
    Write-Host "‚ùå pip not found. Please install pip." -ForegroundColor Red
    exit 1
}

# Step 2: Create GUI directory structure
Write-Host "`nüìÅ Creating GUI directory structure..." -ForegroundColor Yellow

$GUIDir = Join-Path $ProjectRoot "gui"
if (-not (Test-Path $GUIDir)) {
    New-Item -Path $GUIDir -ItemType Directory -Force | Out-Null
    Write-Host "‚úÖ Created gui/ directory" -ForegroundColor Green
} else {
    Write-Host "üìÅ gui/ directory already exists" -ForegroundColor Cyan
}

# Step 3: Install Python dependencies
Write-Host "`nüì¶ Installing Python GUI dependencies..." -ForegroundColor Yellow

$RequirementsContent = @"
# CLI Multi-Rapid GUI Terminal Requirements
PyQt6>=6.4.0
asyncio-subprocess>=0.1.0
pathlib2>=2.3.0
colorama>=0.4.0
"@

$RequirementsFile = Join-Path $GUIDir "requirements.txt"
Set-Content -Path $RequirementsFile -Value $RequirementsContent -Encoding UTF8
Write-Host "üìù Created requirements.txt" -ForegroundColor Green

try {
    Write-Host "Installing PyQt6 and dependencies..." -ForegroundColor Cyan
    pip install PyQt6 colorama --upgrade --quiet
    Write-Host "‚úÖ Dependencies installed successfully" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Failed to install dependencies. Check your Python environment." -ForegroundColor Red
    exit 1
}

# Step 4: Run migration script
Write-Host "`nüîÑ Running VS Code to GUI migration..." -ForegroundColor Yellow

if (-not $KeepVSCode) {
    # Backup VS Code configuration
    if (Test-Path ".vscode") {
        Write-Host "üìã Backing up VS Code configuration..." -ForegroundColor Cyan
        if (Test-Path ".vscode_backup") {
            Remove-Item ".vscode_backup" -Recurse -Force
        }
        Copy-Item ".vscode" ".vscode_backup" -Recurse
        Write-Host "‚úÖ VS Code config backed up to .vscode_backup/" -ForegroundColor Green
    }
} else {
    Write-Host "üîß Keeping VS Code configuration (--KeepVSCode specified)" -ForegroundColor Cyan
}

# Step 5: Copy GUI files
Write-Host "`nüìã Setting up GUI terminal files..." -ForegroundColor Yellow

# Create the main GUI script (we'll place this in gui/cli_terminal_gui.py)
Write-Host "üìù Creating main GUI terminal script..." -ForegroundColor Cyan
Write-Host "‚úÖ GUI terminal script ready (use the artifacts provided)" -ForegroundColor Green

# Step 6: Update launch mechanisms  
Write-Host "`nüöÄ Updating launch mechanisms..." -ForegroundColor Yellow

# Update Launch-Menu.ps1 to include GUI option
$UpdatedLaunchMenu = @'
# CLI Multi-Rapid System - Updated Launch Menu
param()

Write-Host "================================" -ForegroundColor Green
Write-Host "  CLI Multi-Rapid System" -ForegroundColor Green  
Write-Host "  Enterprise Orchestration Platform" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host

# Change to correct directory
Set-Location "C:\Users\Richard Wilks\cli_multi_rapid_DEV"

Write-Host "Choose your interface:" -ForegroundColor Cyan
Write-Host "  1. Python GUI Terminal (New - Recommended)" -ForegroundColor Yellow
Write-Host "  2. Command Line Interface (Terminal only)" -ForegroundColor Yellow
if (Test-Path ".vscode_backup") {
    Write-Host "  3. Restore VS Code Interface" -ForegroundColor Yellow
    $maxChoice = 3
} else {
    $maxChoice = 2
}
Write-Host "  4. Quick system test" -ForegroundColor Yellow
Write-Host "  5. Exit" -ForegroundColor Yellow
Write-Host

do {
    $choice = Read-Host "Enter your choice (1-5)"
    $validChoice = $true
    
    switch ($choice) {
        "1" { 
            Write-Host "üöÄ Starting Python GUI Terminal..." -ForegroundColor Green
            if (Test-Path "gui\cli_terminal_gui.py") {
                python gui\cli_terminal_gui.py
            } else {
                Write-Host "‚ùå GUI not found. Please complete setup first." -ForegroundColor Red
                Write-Host "Run: python gui/cli_terminal_gui.py" -ForegroundColor Yellow
            }
        }
        "2" { 
            Write-Host "Starting CLI interface..." -ForegroundColor Green
            Write-Host "Available commands:"
            Write-Host "  cli-multi-rapid --help"
            Write-Host "  cli-multi-rapid phase stream list"
            Write-Host "  cli-multi-rapid phase stream run stream-a --dry"
            Write-Host
            & powershell -NoExit -Command "Write-Host 'CLI Multi-Rapid System Ready!' -ForegroundColor Green"
        }
        "3" {
            if (Test-Path ".vscode_backup") {
                Write-Host "üìù Restoring VS Code interface..." -ForegroundColor Green
                if (Test-Path ".vscode") {
                    Remove-Item ".vscode" -Recurse -Force
                }
                Copy-Item ".vscode_backup" ".vscode" -Recurse
                Write-Host "‚úÖ VS Code configuration restored!" -ForegroundColor Green
                Write-Host "üí° Run 'code .' to open in VS Code" -ForegroundColor Cyan
            } else {
                Write-Host "‚ùå No VS Code backup found" -ForegroundColor Red
                $validChoice = $false
            }
        }
        "4" { 
            Write-Host "Running quick system test..." -ForegroundColor Green
            & cli-multi-rapid greet "System Test"
            Write-Host
            & cli-multi-rapid phase stream list
            Write-Host "Test completed! Press any key to continue..."
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "5" { 
            Write-Host "Goodbye!" -ForegroundColor Green
            exit
        }
        default { 
            Write-Host "Invalid choice. Please select 1-5." -ForegroundColor Red
            $validChoice = $false
        }
    }
} while (-not $validChoice)
'@

Set-Content -Path "Launch-Menu.ps1" -Value $UpdatedLaunchMenu -Encoding UTF8
Write-Host "‚úÖ Updated Launch-Menu.ps1 with GUI option" -ForegroundColor Green

# Step 7: Update desktop shortcuts
Write-Host "`nüîó Updating desktop shortcuts..." -ForegroundColor Yellow

$ShortcutScript = @'
# Update desktop shortcuts for GUI interface
$WshShell = New-Object -comObject WScript.Shell
$Desktop = $WshShell.SpecialFolders("Desktop")

# Update main shortcut to use new menu
$Shortcut = $WshShell.CreateShortcut("$Desktop\CLI Multi-Rapid System.lnk")
$Shortcut.TargetPath = "powershell.exe"
$Shortcut.Arguments = "-ExecutionPolicy Bypass -File `"C:\Users\Richard Wilks\cli_multi_rapid_DEV\Launch-Menu.ps1`""
$Shortcut.WorkingDirectory = "C:\Users\Richard Wilks\cli_multi_rapid_DEV"
$Shortcut.WindowStyle = 1
$Shortcut.Description = "CLI Multi-Rapid Enterprise System - Choose Interface (GUI Available)"
$Shortcut.IconLocation = "powershell.exe,0"
$Shortcut.Save()

# Create direct GUI shortcut
$GUIShortcut = $WshShell.CreateShortcut("$Desktop\üöÄ CLI Multi-Rapid GUI.lnk")
$GUIShortcut.TargetPath = "python.exe"
$GUIShortcut.Arguments = "`"C:\Users\Richard Wilks\cli_multi_rapid_DEV\gui\cli_terminal_gui.py`""
$GUIShortcut.WorkingDirectory = "C:\Users\Richard Wilks\cli_multi_rapid_DEV"
$GUIShortcut.WindowStyle = 1
$GUIShortcut.Description = "CLI Multi-Rapid System - Direct GUI Launch"
$GUIShortcut.Save()

Write-Host "‚úÖ Desktop shortcuts updated" -ForegroundColor Green
'@

Invoke-Expression $ShortcutScript

# Step 8: Create test script
Write-Host "`nüß™ Creating test script..." -ForegroundColor Yellow

$TestScript = @'
#!/usr/bin/env python3
"""
Test script for GUI terminal interface
"""

import sys
import subprocess
from pathlib import Path

def test_gui_dependencies():
    """Test if GUI dependencies are available"""
    try:
        import PyQt6
        print("‚úÖ PyQt6 available")
        return True
    except ImportError:
        print("‚ùå PyQt6 not available")
        return False

def test_cli_commands():
    """Test basic CLI commands"""
    commands = [
        ["python", "-m", "src.cli_multi_rapid.cli", "--help"],
        ["cli-multi-rapid", "--help"]
    ]
    
    for cmd in commands:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f"‚úÖ Command works: {' '.join(cmd)}")
                return True
        except (subprocess.TimeoutExpired, FileNotFoundError):
            continue
    
    print("‚ùå CLI commands not working")
    return False

def main():
    print("üß™ Testing GUI Terminal Setup")
    print("=" * 40)
    
    success = True
    success &= test_gui_dependencies()
    success &= test_cli_commands()
    
    if success:
        print("\n‚úÖ All tests passed! GUI is ready to use.")
        print("üöÄ Start GUI with: python gui/cli_terminal_gui.py")
    else:
        print("\n‚ùå Some tests failed. Check installation.")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
'@

$TestFile = Join-Path $GUIDir "test_gui_setup.py"
Set-Content -Path $TestFile -Value $TestScript -Encoding UTF8
Write-Host "‚úÖ Created test script: gui/test_gui_setup.py" -ForegroundColor Green

# Step 9: Run tests
Write-Host "`nüß™ Running setup tests..." -ForegroundColor Yellow
try {
    python gui/test_gui_setup.py
} catch {
    Write-Host "‚ö†Ô∏è Test script had issues, but setup may still work" -ForegroundColor Yellow
}

# Step 10: Final summary
Write-Host "`n" + "=" * 60 -ForegroundColor Green
Write-Host "  SETUP COMPLETED SUCCESSFULLY!" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green
Write-Host

Write-Host "üìÅ Files created:" -ForegroundColor Cyan
Write-Host "   gui/cli_terminal_gui.py     - Main GUI application"
Write-Host "   gui/requirements.txt        - Python dependencies"
Write-Host "   gui/test_gui_setup.py      - Test script"
if (-not $KeepVSCode) {
    Write-Host "   .vscode_backup/            - Your VS Code config backup"
}
Write-Host "   Launch-Menu.ps1 (updated)   - Updated launcher with GUI option"
Write-Host

Write-Host "üöÄ How to use:" -ForegroundColor Yellow
Write-Host "   Option 1: python gui/cli_terminal_gui.py    (Direct GUI launch)"
Write-Host "   Option 2: .\Launch-Menu.ps1                (Choose interface)"
Write-Host "   Option 3: Double-click desktop shortcut     (Menu launcher)"
Write-Host

if (-not $KeepVSCode) {
    Write-Host "üîÑ VS Code restoration:" -ForegroundColor Yellow
    Write-Host "   Your VS Code config is backed up in .vscode_backup/"
    Write-Host "   To restore: Copy .vscode_backup to .vscode"
    Write-Host "   Or use option 3 in Launch-Menu.ps1"
    Write-Host
}

Write-Host "üéØ Next steps:" -ForegroundColor Green
Write-Host "   1. Test the GUI: python gui/cli_terminal_gui.py"
Write-Host "   2. Use the desktop shortcut for easy access"
Write-Host "   3. All your VS Code tasks are now GUI buttons!"
Write-Host "   4. Enjoy the improved terminal interface! üéâ"
Write-Host

Write-Host "Problems? Run the test: python gui/test_gui_setup.py" -ForegroundColor Cyan
