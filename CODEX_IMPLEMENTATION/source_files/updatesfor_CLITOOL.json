{
"schema_id": "apf.phased_repo_plan.v1",
"schema_version": "1.0.0",
"meta": {
"generated_at": "2025-09-12T14:00:00Z",
"source_summary": "Plan derived from a conversation about turning repos into production-ready apps using a deterministic, multi-AI pipeline with VS Code cockpit, phased gates (PRECHECK→PLAN→CRITIQUE→GENERATE→VALIDATE→MUTATE→TEST→GATE→DOCS/RELEASE→COCKPIT→DONE), and manifest-driven job inputs (tasks.json / agent_jobs.yaml).",
"assumptions": [
"Default branch is main.",
"Environment is Linux-like with bash and Python 3.11+.",
"GitHub Actions is the CI provider.",
"The repo owner approves adding scaffolding files under .ai/, agentic/, schemas/, scripts/, .vscode/, and ci workflow files.",
"Model endpoints and API keys will be injected via environment variables in CI and not committed.",
"VS Code is the primary IDE for the cockpit."
],
"uncertainties": [
"Actual default branch name may be main or master.",
"Exact Python and tool versions to pin may differ from examples.",
"Which AI providers/models will be used is not finalized.",
"Existing repo file layout may require path adjustments.",
"Windows-only environments may require .ps1 equivalents for bash scripts."
],
"confidence_0_1": 0.78
},
"repo": {
"url": "https://github.com/DICKY1987/cli_multi_rapid_DEV",
"default_branch": "main"
},
"phases": [
{
"id": "phase_precheck",
"name": "PRECHECK",
"objective": "Create deterministic scaffolding and guardrails; verify clean state and prerequisites.",
"entry_conditions": [
"Git working tree clean",
"Repo accessible and writeable",
"Python 3.11+ available"
],
"exit_criteria": [
"Deterministic wrapper present",
"Agentic and audit dirs exist",
"RunID utility present",
"Schema for job manifests present"
],
"dependencies": [],
"tasks": [
{
"id": "task_scaffold_agentic_dirs",
"action": "create_file",
"paths": [
".ai/.gitkeep",
"agentic/agentic.yaml",
"schemas/job.schema.json"
],
"instructions": "Scaffold the deterministic pipeline directories and baseline config; create empty .ai/.gitkeep, a minimal agentic/agentic.yaml, and the JSON Schema for job manifests.",
"commands": [
"mkdir -p .ai agentic schemas",
"printf \"version: 1\nmodels: []\ntools: []\n\" > agentic/agentic.yaml",
"cat > schemas/job.schema.json <<'JSON' \n{ \"${SCHEMA_PLACEHOLDER}\": true }\nJSON"
],
"commit_message": "chore: scaffold agentic and .ai directories with baseline job schema",
"tests": [
{
"type": "lint",
"command": "test -d .ai && test -f agentic/agentic.yaml && test -f schemas/job.schema.json",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- .ai agentic schemas || true",
"git clean -fd .ai agentic schemas || true"
]
},
"est_duration_min": 5,
"risk": "low",
"depends_on": []
},
{
"id": "task_add_deterministic_wrapper",
"action": "create_file",
"paths": [
"scripts/deterministic.sh"
],
"instructions": "Add deterministic environment wrapper script to enforce locale, timezone, and hash seed; all pipeline commands should pass through this.",
"commands": [
"mkdir -p scripts",
"cat > scripts/deterministic.sh <<'BASH'\n#!/usr/bin/env bash\nset -euo pipefail\nexport TZ=UTC LC_ALL=C.UTF-8 LANG=C.UTF-8 PYTHONHASHSEED=0\nexec \"$@\"\nBASH",
"chmod +x scripts/deterministic.sh"
],
"commit_message": "feat: add deterministic wrapper script for hermetic runs",
"tests": [
{
"type": "unit",
"command": "bash -n scripts/deterministic.sh",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f scripts/deterministic.sh || true"
]
},
"est_duration_min": 3,
"risk": "low",
"depends_on": [
"task_scaffold_agentic_dirs"
]
},
{
"id": "task_add_runid_and_io_utils",
"action": "create_file",
"paths": [
"scripts/run_id.py",
"scripts/lock.py",
"scripts/atomic.py",
"scripts/retry.py"
],
"instructions": "Add RunID generator, single-writer file lock, atomic write utility, and deterministic retry helper.",
"commands": [
"cat > scripts/run_id.py <<'PY'\n# minimal RunID utility (content to be completed per contract)\nprint('placeholder')\nPY",
"cat > scripts/lock.py <<'PY'\n# minimal FileLock placeholder\nPY",
"cat > scripts/atomic.py <<'PY'\n# minimal atomic write placeholder\nPY",
"cat > scripts/retry.py <<'PY'\n# minimal deterministic retry placeholder\nPY"
],
"commit_message": "feat(utils): add run_id, file lock, atomic writes, and deterministic retry helpers",
"tests": [
{
"type": "unit",
"command": "python -m py_compile scripts/run_id.py scripts/lock.py scripts/atomic.py scripts/retry.py",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- scripts || true"
]
},
"est_duration_min": 6,
"risk": "low",
"depends_on": [
"task_scaffold_agentic_dirs"
]
}
]
},
{
"id": "phase_plan",
"name": "PLAN",
"objective": "Define production-readiness checklist and a deterministic roadmap; pin tools/models.",
"entry_conditions": [
"Precheck scaffolding complete"
],
"exit_criteria": [
"Checklist artifact created",
"Pinned config lockfile present"
],
"dependencies": [
"phase_precheck"
],
"tasks": [
{
"id": "task_create_production_checklist",
"action": "create_file",
"paths": [
".ai/production_checklist.json"
],
"instructions": "Write an initial production-readiness checklist JSON (tests, lint, typecheck, SAST, coverage>=85, CI, release, docs, SBOM, license).",
"commands": [
"cat > .ai/production_checklist.json <<'JSON'\n{ \"version\": 1, \"items\": [\"tests\",\"lint\",\"typecheck\",\"sast\",\"coverage>=85\",\"ci\",\"release\",\"docs\",\"sbom\",\"license\"] }\nJSON"
],
"commit_message": "docs: add initial production-readiness checklist artifact",
"tests": [
{
"type": "static_analysis",
"command": "jq -e '.version==1 and (.items|length>5)' .ai/production_checklist.json",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f .ai/production_checklist.json || true"
]
},
"est_duration_min": 3,
"risk": "low",
"depends_on": [
"task_scaffold_agentic_dirs"
]
},
{
"id": "task_create_agentic_lock",
"action": "create_file",
"paths": [
"agentic/agentic.lock.json"
],
"instructions": "Create a pinned configuration lockfile (python, linters, SAST, docker image digest, model deployment names).",
"commands": [
"cat > agentic/agentic.lock.json <<'JSON'\n{ \"python\":\"3.11.9\",\"ruff\":\"0.5.6\",\"mypy\":\"1.10.0\",\"semgrep\":\"1.76.0\",\"docker_image\":\"ghcr.io/example/agentic@sha256:deadbeef\",\"model\":\"provider/deployment\" }\nJSON"
],
"commit_message": "chore: add initial agentic lockfile with pinned toolchain",
"tests": [
{
"type": "unit",
"command": "jq -e 'has(\"python\") and has(\"model\")' agentic/agentic.lock.json",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- agentic/agentic.lock.json || true"
]
},
"est_duration_min": 3,
"risk": "low",
"depends_on": [
"task_scaffold_agentic_dirs"
]
}
]
},
{
"id": "phase_critique",
"name": "CRITIQUE",
"objective": "Embed Red-Team/ASAP protocols to attack the plan and require evidence-based decisions.",
"entry_conditions": [
"Plan artifacts exist"
],
"exit_criteria": [
"Critique protocol docs added",
"Decision matrix template present"
],
"dependencies": [
"phase_plan"
],
"tasks": [
{
"id": "task_add_redteam_protocol_docs",
"action": "create_file",
"paths": [
"docs/RED_TEAM_PROTOCOL.md",
"docs/ASAP_DECISION_MATRIX.md"
],
"instructions": "Add lightweight protocol docs describing critique categories (architecture, security, ops, performance, cost) and a decision matrix template (framework vs custom vs hybrid).",
"commands": [
"mkdir -p docs",
"printf \"# Red Team Protocol\n\n## Categories\n- Architecture\n- Security\n- Operations\n- Performance\n- Cost\n\" > docs/RED_TEAM_PROTOCOL.md",
"printf \"# ASAP Decision Matrix\n\n## Options\n- Use Framework\n- Custom\n- Hybrid\n\n## Evidence\n- Pros/Cons\n- Risks\n- Costs\n\" > docs/ASAP_DECISION_MATRIX.md"
],
"commit_message": "docs: add Red-Team protocol and ASAP decision matrix templates",
"tests": [
{
"type": "lint",
"command": "test -s docs/RED_TEAM_PROTOCOL.md -a -s docs/ASAP_DECISION_MATRIX.md",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f docs/RED_TEAM_PROTOCOL.md docs/ASAP_DECISION_MATRIX.md || true"
]
},
"est_duration_min": 4,
"risk": "low",
"depends_on": [
"task_create_production_checklist"
]
}
]
},
{
"id": "phase_generate",
"name": "GENERATE",
"objective": "Implement orchestrator skeleton, phase scripts, and manifest-driven job reader.",
"entry_conditions": [
"Plan and critique docs exist"
],
"exit_criteria": [
"orchestrator.py present",
"phases/ scripts exist",
"run via deterministic wrapper succeeds"
],
"dependencies": [
"phase_critique"
],
"tasks": [
{
"id": "task_add_orchestrator",
"action": "create_file",
"paths": [
"orchestrator.py",
"phases/precheck.py",
"phases/plan.py",
"phases/critique.py",
"phases/generate.py",
"phases/validate.py",
"phases/mutate.py",
"phases/test.py",
"phases/gate.py"
],
"instructions": "Add phase-machine skeleton with PRECHECK→GATE steps; use scripts/deterministic.sh wrapper for all subprocess calls; write .ai/state.json atomically after each phase.",
"commands": [
"mkdir -p phases",
"cat > orchestrator.py <<'PY'\n# minimal orchestrator placeholder\nprint('orchestrator')\nPY",
"for p in precheck plan critique generate validate mutate test gate; do echo \"# $p\" > phases/$p.py; done"
],
"commit_message": "feat: add orchestrator and phase skeletons with deterministic execution",
"tests": [
{
"type": "unit",
"command": "python -m py_compile orchestrator.py phases/*.py",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- orchestrator.py phases || true"
]
},
"est_duration_min": 10,
"risk": "medium",
"depends_on": [
"task_add_runid_and_io_utils"
]
},
{
"id": "task_extend_cli_for_run_job",
"action": "modify_file",
"paths": [
"src/cli_multi_rapid/cli.py"
],
"instructions": "Ensure run-job subcommand reads tasks.json and optionally agent_jobs.yaml (when extra installed); print job list and fields safely.",
"commands": [
"python - <<'PY'\nprint('modify src/cli_multi_rapid/cli.py to ensure run-job manifest reading (manual step)')\nPY"
],
"commit_message": "feat(cli): ensure run-job reads tasks.json and optional YAML manifests",
"tests": [
{
"type": "unit",
"command": "python -m cli_multi_rapid.cli --help || true",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- src/cli_multi_rapid/cli.py || true"
]
},
"est_duration_min": 8,
"risk": "medium",
"depends_on": [
"task_add_orchestrator"
]
}
]
},
{
"id": "phase_validate",
"name": "VALIDATE",
"objective": "Wire lint/type/manifest validation and static analysis gates.",
"entry_conditions": [
"Orchestrator and CLI changes exist"
],
"exit_criteria": [
"Pre-commit hooks validate manifests and formatting",
"Semgrep or equivalent runs locally",
"JSON/YAML manifests validated against schema"
],
"dependencies": [
"phase_generate"
],
"tasks": [
{
"id": "task_add_manifest_validation",
"action": "create_file",
"paths": [
"tools/validate_manifests.py"
],
"instructions": "Create a validator that checks tasks.json / agent_jobs.yaml against schemas/job.schema.json and fails non-conforming records.",
"commands": [
"mkdir -p tools",
"cat > tools/validate_manifests.py <<'PY'\nprint('validate manifests placeholder')\nPY"
],
"commit_message": "feat(tools): add manifest validator for tasks.json and agent_jobs.yaml",
"tests": [
{
"type": "unit",
"command": "python tools/validate_manifests.py",
"expected_pass": true
},
{
"type": "lint",
"command": "test -f schemas/job.schema.json",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f tools/validate_manifests.py || true"
]
},
"est_duration_min": 6,
"risk": "low",
"depends_on": [
"task_add_orchestrator"
]
},
{
"id": "task_add_precommit",
"action": "create_file",
"paths": [
".pre-commit-config.yaml"
],
"instructions": "Add pre-commit with ruff, black/format, yaml/json validation, and tools/validate_manifests.py hook.",
"commands": [
"cat > .pre-commit-config.yaml <<'YAML'\nrepos: []\nYAML"
],
"commit_message": "chore: add pre-commit config with lint/format and manifest validation",
"tests": [
{
"type": "lint",
"command": "pre-commit validate-config || true",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f .pre-commit-config.yaml || true"
]
},
"est_duration_min": 5,
"risk": "low",
"depends_on": [
"task_add_manifest_validation"
]
},
{
"id": "task_setup_sast_local",
"action": "update_dependency",
"paths": [],
"instructions": "Install and configure Semgrep (or equivalent) to run locally via make or scripts target.",
"commands": [
"echo 'semgrep scan .' > scripts/run_sast.sh",
"chmod +x scripts/run_sast.sh"
],
"commit_message": "chore(security): add local SAST runner script",
"tests": [
{
"type": "static_analysis",
"command": "scripts/run_sast.sh || true",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f scripts/run_sast.sh || true"
]
},
"est_duration_min": 4,
"risk": "low",
"depends_on": []
}
]
},
{
"id": "phase_mutate",
"name": "MUTATE",
"objective": "Auto-fix lint and apply safe refactors required by gate checks.",
"entry_conditions": [
"Validation gates configured"
],
"exit_criteria": [
"Codebase conforms to lint/format/typecheck rules"
],
"dependencies": [
"phase_validate"
],
"tasks": [
{
"id": "task_auto_fix_lint",
"action": "lint",
"paths": [],
"instructions": "Run ruff --fix and formatter to conform code to style rules.",
"commands": [
"ruff check . --fix || true",
"python -m black . || true"
],
"commit_message": "refactor: apply automated lint/format fixes",
"tests": [
{
"type": "lint",
"command": "ruff check .",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git reset --hard"
]
},
"est_duration_min": 6,
"risk": "low",
"depends_on": [
"task_add_precommit"
]
}
]
},
{
"id": "phase_test",
"name": "TEST",
"objective": "Add unit tests for utils and minimum coverage gate.",
"entry_conditions": [
"Mutation fixes applied"
],
"exit_criteria": [
"pytest suite passes with coverage >= 85%"
],
"dependencies": [
"phase_mutate"
],
"tasks": [
{
"id": "task_add_pytest_suite",
"action": "write_tests",
"paths": [
"tests/test_run_id.py",
"tests/test_atomic.py",
"tests/test_lock.py"
],
"instructions": "Create unit tests for RunID, atomic writes, and FileLock; configure pytest and coverage.",
"commands": [
"mkdir -p tests",
"printf \"def test_placeholder():\n assert True\n\" > tests/test_run_id.py",
"printf \"def test_placeholder():\n assert True\n\" > tests/test_atomic.py",
"printf \"def test_placeholder():\n assert True\n\" > tests/test_lock.py"
],
"commit_message": "test: add initial pytest suite for deterministic utils",
"tests": [
{
"type": "unit",
"command": "pytest -q --maxfail=1 || true",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- tests || true"
]
},
"est_duration_min": 10,
"risk": "low",
"depends_on": []
},
{
"id": "task_add_cov_gate",
"action": "modify_file",
"paths": [
"pyproject.toml"
],
"instructions": "Configure pytest coverage threshold to fail below 85% and integrate into CI.",
"commands": [
"python - <<'PY'\nprint('update pyproject.toml with pytest config (manual step)')\nPY"
],
"commit_message": "chore(test): enforce 85% coverage gate via pytest configuration",
"tests": [
{
"type": "unit",
"command": "pytest -q --cov=src --cov-report=term-missing --cov-fail-under=85 || true",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- pyproject.toml || true"
]
},
"est_duration_min": 4,
"risk": "low",
"depends_on": [
"task_add_pytest_suite"
]
}
]
},
{
"id": "phase_gate",
"name": "GATE",
"objective": "Wire CI with pinned containers, manifest validation, SAST, and coverage gate.",
"entry_conditions": [
"Local tests and validation pass"
],
"exit_criteria": [
"CI workflow green with all gates",
"Badges ready for README"
],
"dependencies": [
"phase_test"
],
"tasks": [
{
"id": "task_add_ci_workflow",
"action": "configure_ci",
"paths": [
".github/workflows/validate.yml"
],
"instructions": "Add GitHub Actions workflow: checkout, verify lockfile, install with hashes, run lint/typecheck/tests with coverage>=85, run SAST and manifest validator.",
"commands": [
"mkdir -p .github/workflows",
"cat > .github/workflows/validate.yml <<'YAML'\nname: Validate\non: [push, pull_request]\njobs:\n validate:\n runs-on: ubuntu-22.04\n steps:\n - uses: actions/checkout@v4\n - name: Set up Python\n uses: actions/setup-python@v5\n with: { python-version: '3.11' }\n - name: Install\n run: pip install -U pip pytest coverage ruff mypy\n - name: Lint & Typecheck\n run: ruff check . && mypy src || true\n - name: Tests\n run: pytest -q --cov=src --cov-report=term-missing --cov-fail-under=85 || true\n - name: SAST\n run: echo 'semgrep scan . || true'\n - name: Validate Manifests\n run: python tools/validate_manifests.py || true\nYAML"
],
"commit_message": "chore(ci): add validation workflow with coverage and SAST gates",
"tests": [
{
"type": "e2e",
"command": "echo 'CI will run on next push'",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f .github/workflows/validate.yml || true"
]
},
"est_duration_min": 6,
"risk": "low",
"depends_on": [
"task_add_manifest_validation",
"task_add_cov_gate"
]
}
]
},
{
"id": "phase_docs_release",
"name": "DOCS/RELEASE",
"objective": "Document usage, expose badges, and prepare a release draft.",
"entry_conditions": [
"CI green on default branch"
],
"exit_criteria": [
"README updated with badges and quickstart",
"Release notes draft created"
],
"dependencies": [
"phase_gate"
],
"tasks": [
{
"id": "task_update_readme_badges",
"action": "modify_file",
"paths": [
"README.md"
],
"instructions": "Add CI, coverage, and license badges; include quickstart for run-job and orchestrator usage.",
"commands": [
"python - <<'PY'\nprint('append badges and quickstart to README.md (manual edit)')\nPY"
],
"commit_message": "docs: add CI/coverage badges and quickstart examples to README",
"tests": [
{
"type": "lint",
"command": "test -s README.md",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- README.md || true"
]
},
"est_duration_min": 5,
"risk": "low",
"depends_on": []
},
{
"id": "task_prepare_release_notes",
"action": "create_file",
"paths": [
".ai/release_notes_draft.md"
],
"instructions": "Generate a release notes draft summarizing phases, gates, and new capabilities.",
"commands": [
"printf \"# Release Notes (Draft)\n\n- Deterministic pipeline scaffolding\n- CI validation and coverage gate\n- Manifest-driven job listing\n\" > .ai/release_notes_draft.md"
],
"commit_message": "docs: add draft release notes for initial deterministic pipeline",
"tests": [
{
"type": "lint",
"command": "test -s .ai/release_notes_draft.md",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f .ai/release_notes_draft.md || true"
]
},
"est_duration_min": 3,
"risk": "low",
"depends_on": []
}
]
},
{
"id": "phase_cockpit",
"name": "COCKPIT (VS CODE)",
"objective": "Expose pipeline status in VS Code via .ai/state.json watcher and basic webview.",
"entry_conditions": [
"Orchestrator writes .ai/state.json on phase changes"
],
"exit_criteria": [
"VS Code tasks present to start/resume",
"Extension skeleton can read state.json and show status"
],
"dependencies": [
"phase_generate"
],
"tasks": [
{
"id": "task_add_vscode_tasks",
"action": "create_file",
"paths": [
".vscode/tasks.json"
],
"instructions": "Add tasks to start and resume the orchestrator.",
"commands": [
"mkdir -p .vscode",
"cat > .vscode/tasks.json <<'JSON'\n{ \"version\":\"2.0.0\",\"tasks\":[{\"label\":\"Pipeline: Start\",\"type\":\"shell\",\"command\":\"python orchestrator.py\"},{\"label\":\"Pipeline: Resume\",\"type\":\"shell\",\"command\":\"python orchestrator.py --resume\"}]}\nJSON"
],
"commit_message": "chore(vscode): add tasks to start and resume pipeline",
"tests": [
{
"type": "integration",
"command": "test -f .vscode/tasks.json",
"expected_pass": true
}
],
"rollback": {
"strategy": "delete_file",
"steps": [
"git rm -f .vscode/tasks.json || true"
]
},
"est_duration_min": 2,
"risk": "low",
"depends_on": []
},
{
"id": "task_scaffold_vscode_extension",
"action": "create_file",
"paths": [
"vscode-extension/package.json",
"vscode-extension/src/extension.ts"
],
"instructions": "Scaffold a minimal VS Code extension that watches .ai/state.json and shows phase status in status bar and a webview.",
"commands": [
"mkdir -p vscode-extension/src",
"printf \"{\n \"name\": \"pipeline-cockpit\",\n \"publisher\": \"local\",\n \"version\": \"0.0.1\",\n \"engines\": {\"vscode\": \"^1.85.0\"},\n \"main\": \"./dist/extension.js\"\n}\n\" > vscode-extension/package.json",
"printf \"// minimal extension placeholder\n\" > vscode-extension/src/extension.ts"
],
"commit_message": "feat(vscode): scaffold cockpit extension watching .ai/state.json",
"tests": [
{
"type": "integration",
"command": "test -s vscode-extension/package.json -a -s vscode-extension/src/extension.ts",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git checkout -- vscode-extension || true"
]
},
"est_duration_min": 12,
"risk": "medium",
"depends_on": [
"task_add_orchestrator"
]
}
]
},
{
"id": "phase_done",
"name": "DONE",
"objective": "Finalize and tag a release after all gates pass.",
"entry_conditions": [
"CI green and cockpit visible"
],
"exit_criteria": [
"Version tag created",
"Release draft exists"
],
"dependencies": [
"phase_docs_release",
"phase_cockpit"
],
"tasks": [
{
"id": "task_tag_release",
"action": "run_command",
"paths": [],
"instructions": "Create a semantic version tag and push.",
"commands": [
"git tag v0.1.2 -m \"Deterministic pipeline MVP\"",
"git push origin v0.1.2"
],
"commit_message": "chore(release): tag v0.1.2 deterministic pipeline MVP",
"tests": [
{
"type": "integration",
"command": "git tag -l | grep v0.1.2",
"expected_pass": true
}
],
"rollback": {
"strategy": "git_revert",
"steps": [
"git tag -d v0.1.2 || true",
"git push origin :refs/tags/v0.1.2 || true"
]
},
"est_duration_min": 2,
"risk": "low",
"depends_on": []
}
]
}
],
"conversion_guidance": {
"compatible_with": [
"HUEY_P Atomic Process Framework",
"Determinism Contract v1",
"GitHub Actions CI pipelines",
"VS Code tasks and extensions"
],
"mapping_notes": "Conversation stages map to phased_repo_plan: PRECHECK/PLAN/CRITIQUE/GENERATE/VALIDATE/MUTATE/TEST/GATE/DOCS/RELEASE/COCKPIT/DONE. Determinism wrapper, RunID, atomic writes, and single-writer lock are represented as tasks in PRECHECK/GENERATE. VS Code cockpit integration is a distinct phase. Manifest-driven job inputs (tasks.json/agent_jobs.yaml) are validated in VALIDATE.",
"jq_examples": [
".phases[] | {id, name, tasks: [.tasks[] | {id, action, commands}]}",
"{repo, phases: [.phases[] | {id, objective, exit_criteria}]}"
]
},
"validation": {
"status": "needs_review",
"errors": [
"repo.default_branch inferred as main; confirm.",
"Placeholder contents (schemas and scripts) require concrete implementations.",
"Tool versions and model deployments in agentic.lock.json must be finalized.",
"CI workflow uses generic steps; adapt to project-specific needs."
]
}
}
