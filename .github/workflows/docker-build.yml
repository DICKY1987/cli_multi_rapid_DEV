name: Docker Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'requirements.txt'
      - 'pyproject.toml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test different stages
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [development, production, testing]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create required directories
      run: |
        mkdir -p artifacts logs cost

    - name: Build Docker image - ${{ matrix.target }}
      uses: docker/build-push-action@v6
      with:
        context: .
        target: ${{ matrix.target }}
        push: false
        tags: cli-orchestrator:${{ matrix.target }}-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image - ${{ matrix.target }}
      run: |
        if [ "${{ matrix.target }}" = "testing" ]; then
          docker run --rm cli-orchestrator:${{ matrix.target }}-${{ github.sha }}
        else
          docker run --rm cli-orchestrator:${{ matrix.target }}-${{ github.sha }} --help
        fi

  # Integration test with docker-compose
  integration-test:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create required directories
      run: |
        mkdir -p artifacts logs cost

    - name: Create dummy .env file
      run: |
        cp .env.template .env
        echo "ANTHROPIC_API_KEY=dummy_key" >> .env

    - name: Start services with docker-compose
      run: |
        docker-compose up -d redis
        sleep 10

    - name: Test Redis health
      run: |
        docker-compose exec -T redis redis-cli ping

    - name: Build and test CLI orchestrator
      run: |
        docker-compose build cli-orchestrator
        docker-compose run --rm cli-orchestrator --help

    - name: Test workflows directory mount
      run: |
        docker-compose run --rm cli-orchestrator ls -la .ai/workflows

    - name: Cleanup
      run: |
        docker-compose down -v

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image for security scan
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        push: false
        tags: cli-orchestrator:security-scan
        cache-from: type=gha

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: cli-orchestrator:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Publish to registry (only on main branch)
  publish:
    runs-on: ubuntu-latest
    needs: [build-test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push development image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: development
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max