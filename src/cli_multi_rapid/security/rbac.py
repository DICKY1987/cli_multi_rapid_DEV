"""Role-Based Access Control (RBAC) for CLI Orchestrator.Manages roles, permissions, and access control decisionsfor CLI Orchestrator operations."""from collections import defaultdictfrom .framework import Permission, Roleclass RoleBasedAccessControl:    """Role-based access control manager."""    def __init__(self):        # Role -> Permissions mapping        self._role_permissions: dict[Role, set[Permission]] = defaultdict(set)        # User -> Additional permissions (beyond roles)        self._user_permissions: dict[str, set[Permission]] = defaultdict(set)    def assign_permissions_to_role(        self, role: Role, permissions: list[Permission]    ) -> None:        """Assign permissions to a role."""        self._role_permissions[role].update(permissions)    def revoke_permissions_from_role(        self, role: Role, permissions: list[Permission]    ) -> None:        """Revoke permissions from a role."""        self._role_permissions[role].difference_update(permissions)    def assign_permission_to_user(self, user_id: str, permission: Permission) -> None:        """Assign additional permission directly to a user."""        self._user_permissions[user_id].add(permission)    def revoke_permission_from_user(self, user_id: str, permission: Permission) -> None:        """Revoke permission directly from a user."""        self._user_permissions[user_id].discard(permission)    def get_permissions_for_roles(self, roles: set[Role]) -> set[Permission]:        """Get all permissions for a set of roles."""        permissions = set()        for role in roles:            permissions.update(self._role_permissions.get(role, set()))        return permissions    def get_user_permissions(self, user) -> set[Permission]:        """Get all permissions for a user (from roles + direct assignments)."""        # Permissions from roles        role_permissions = self.get_permissions_for_roles(user.roles)        # Direct permissions        direct_permissions = self._user_permissions.get(user.id, set())        return role_permissions.union(direct_permissions)    def check_permission(self, user, permission: Permission) -> bool:        """Check if user has specific permission."""        user_permissions = self.get_user_permissions(user)        return permission in user_permissions    def check_any_permission(self, user, permissions: list[Permission]) -> bool:        """Check if user has any of the specified permissions."""        user_permissions = self.get_user_permissions(user)        return any(perm in user_permissions for perm in permissions)    def check_all_permissions(self, user, permissions: list[Permission]) -> bool:        """Check if user has all of the specified permissions."""        user_permissions = self.get_user_permissions(user)        return all(perm in user_permissions for perm in permissions)    def get_role_permissions(self, role: Role) -> set[Permission]:        """Get permissions for a specific role."""        return self._role_permissions.get(role, set()).copy()    def list_all_role_permissions(self) -> dict[str, list[str]]:        """List all role-permission mappings."""        return {            role.value: [perm.value for perm in permissions]            for role, permissions in self._role_permissions.items()        }    def has_role(self, user, role: Role) -> bool:        """Check if user has specific role."""        return role in user.roles    def has_any_role(self, user, roles: list[Role]) -> bool:        """Check if user has any of the specified roles."""        return any(role in user.roles for role in roles)    def get_effective_permissions_summary(self, user) -> dict[str, any]:        """Get detailed summary of user's effective permissions."""        role_permissions = {}        for role in user.roles:            role_permissions[role.value] = [                perm.value for perm in self._role_permissions.get(role, set())            ]        direct_permissions = [            perm.value for perm in self._user_permissions.get(user.id, set())        ]        all_permissions = [perm.value for perm in self.get_user_permissions(user)]        return {            "user_id": user.id,            "username": user.username,            "roles": [role.value for role in user.roles],            "role_permissions": role_permissions,            "direct_permissions": direct_permissions,            "effective_permissions": sorted(all_permissions),        }